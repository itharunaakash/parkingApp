import mongoose from 'mongoose';import bcrypt from 'bcryptjs';const userSchema = new mongoose.Schema({    username: {        type: String,        required: true,        unique: true,        trim: true    },    password: {        type: String,        required: true    },    role: {        type: String,        enum: ['customer', 'admin'],        default: 'customer'    },    mfaEnabled: {        type: Boolean,        default: false    },    mfaSecret: {        type: String,        default: null    },    email: {        type: String,        required: true,        unique: true,        trim: true,        lowercase: true    },    phone: {        type: String,        trim: true    },    vehicles: [{        type: {            type: String,            enum: ['car', 'bike', 'truck'],            required: true        },        licensePlate: {            type: String,            required: true        },        make: String,        model: String,        year: Number    }],    stripeCustomerId: String,    createdAt: {        type: Date,        default: Date.now    }});userSchema.pre('save', async function(next) {    if (!this.isModified('password')) return next();    try {        const salt = await bcrypt.genSalt(10);        this.password = await bcrypt.hash(this.password, salt);        next();    } catch (error) {        next(error);    }});userSchema.methods.comparePassword = async function(candidatePassword) {    try {        return await bcrypt.compare(candidatePassword, this.password);    } catch (error) {        throw error;    }};export default mongoose.model('User', userSchema);