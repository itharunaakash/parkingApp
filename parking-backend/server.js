import dotenv from "dotenv";dotenv.config();import express from "express";import mongoose from "mongoose";import cors from "cors";const app = express();app.use(cors({  origin: '*',  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],  allowedHeaders: ['Content-Type', 'Authorization']}));app.use(express.json());app.use(express.urlencoded({ extended: true }));mongoose.connect(process.env.MONGODB_URI, {  useNewUrlParser: true,  useUnifiedTopology: true,})  .then(() => console.log(' Connected to MongoDB'))  .catch((err) => console.error('MongoDB connection error:', err));import paymentRoutes from "./routes/payments.js";import authRoutes from "./routes/auth.js";import profileRoutes from "./routes/profile.js";import adminRoutes from "./routes/admin.js";import bookingRoutes from "./routes/bookings.js";import reportRoutes from "./routes/reports.js";import dashboardRoutes from "./routes/dashboard.js";app.use('/api/auth', authRoutes);app.use('/api/profile', profileRoutes);app.use('/api/admin', adminRoutes);app.use('/api/bookings', bookingRoutes);app.use('/api/payments', paymentRoutes);app.use('/api/dashboard', dashboardRoutes);app.use('/api/reports', reportRoutes);app.get('/', (req, res) => {  res.json({    message: 'ðŸš— Parking Management System API',    version: '1.0.0',    routes: {      auth: '/api/auth',      profile: '/api/profile',      admin: '/api/admin',      bookings: '/api/bookings',      payments: '/api/payments',      reports: '/api/reports'    }  });});app.use((err, req, res, next) => {  console.error(' Server Error:', err);  res.status(500).json({ message: 'Something went wrong!', error: err.message });});const PORT = process.env.PORT || 5001;app.listen(PORT, () => {  console.log(` Server running on port ${PORT}`);});